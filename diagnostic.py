#!/usr/bin/env python3
"""
Script de diagnostic pour l'Azure Function
"""
import os
import sys

def check_azure_function_setup():
    """V√©rifie la configuration de l'Azure Function"""
    print("üîç DIAGNOSTIC DE L'AZURE FUNCTION")
    print("=" * 50)
    
    # V√©rifier la structure des fichiers
    base_path = os.path.dirname(__file__)
    
    files_to_check = [
        ('recommend/__init__.py', 'Fichier principal de la fonction'),
        ('recommend/function.json', 'Configuration de la fonction'),
        ('host.json', 'Configuration de l\'h√¥te'),
        ('requirements.txt', 'D√©pendances Python'),
        ('recommendation_engine/recommender.py', 'Moteur de recommandation'),
        ('config.py', 'Configuration'),
        ('../../processed_data/articles_metadata.json', 'Donn√©es articles'),
        ('../../processed_data/user_interactions.json', 'Donn√©es interactions'),
        ('../../processed_data/embeddings_optimized.pkl', 'Embeddings'),
        ('../../processed_data/data_summary.json', 'R√©sum√© des donn√©es')
    ]
    
    print("üìÅ V√©rification des fichiers requis:")
    all_files_exist = True
    
    for file_path, description in files_to_check:
        full_path = os.path.join(base_path, file_path)
        if os.path.exists(full_path):
            print(f"   ‚úÖ {description}: {file_path}")
        else:
            print(f"   ‚ùå {description}: {file_path} (MANQUANT)")
            all_files_exist = False
    
    print("\nüì¶ V√©rification des d√©pendances Python:")
    
    dependencies = [
        ('azure.functions', 'Azure Functions SDK'),
        ('azure.storage.blob', 'Azure Blob Storage'),
        ('pandas', 'Pandas'),
        ('numpy', 'NumPy'),
        ('pickle', 'Pickle (built-in)'),
        ('json', 'JSON (built-in)')
    ]
    
    for module_name, description in dependencies:
        try:
            __import__(module_name)
            print(f"   ‚úÖ {description}")
        except ImportError:
            print(f"   ‚ùå {description} (MANQUANT)")
    
    print("\nüîß Variables d'environnement:")
    azure_conn = os.getenv('AZURE_STORAGE_CONNECTION_STRING')
    if azure_conn:
        print(f"   ‚úÖ AZURE_STORAGE_CONNECTION_STRING: Configur√©e")
    else:
        print(f"   ‚ö†Ô∏è  AZURE_STORAGE_CONNECTION_STRING: Non configur√©e (fallback aux fichiers locaux)")
    
    print("\nüìã R√©sum√©:")
    if all_files_exist:
        print("   ‚úÖ Tous les fichiers requis sont pr√©sents")
        print("   üöÄ L'Azure Function devrait fonctionner en local")
        print("\nüí° Pour d√©marrer l'Azure Function en local:")
        print("   1. Installez Azure Functions Core Tools")
        print("   2. Ex√©cutez: func start")
        print("   3. L'endpoint sera disponible sur: http://localhost:7071/api/recommend")
    else:
        print("   ‚ùå Certains fichiers requis sont manquants")
        print("   ‚ö†Ô∏è  Veuillez corriger les probl√®mes avant de d√©ployer")
    
    print("\nüåê Test d'endpoint (exemple):")
    print("   GET http://localhost:7071/api/recommend?user_id=123&n_recommendations=5")
    
    print("=" * 50)

if __name__ == "__main__":
    check_azure_function_setup()
